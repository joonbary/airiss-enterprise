import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Paper,
  TextField,
  MenuItem,
  Button,
  Typography,
  Grid,
  LinearProgress,
  Alert,
  FormControl,
  InputLabel,
  Select,
  FormControlLabel,
  Switch,
  Chip,
  Card,
  CardContent,
  CircularProgress,
  Autocomplete,
  SelectChangeEvent,
  AlertTitle
} from '@mui/material';
import { PlayArrow, Stop, Download, Info, CheckCircle, Warning } from '@mui/icons-material';
import { startAnalysis, getAnalysisStatus, downloadResults } from '../../services/api';
import { useWebSocket } from '../../hooks/useWebSocket';
import { AnalysisResult } from '../../types';

interface AnalysisViewProps {
  fileId: string | null;
  fileName: string;
  totalRecords: number;
  columns: string[];
}

interface BackendWebSocketMessage {
  type: 'analysis_progress' | 'analysis_completed' | 'analysis_failed' | 'analysis_started';
  progress?: number;
  current_uid?: string;
  processed?: number;
  total?: number;
  total_processed?: number;
  average_score?: number;
  error?: string;
  message?: string;
}

export const AnalysisView: React.FC<AnalysisViewProps> = ({
  fileId,
  fileName,
  totalRecords,
  columns = []
}) => {
  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [sampleSize, setSampleSize] = useState<number>(25);
  const [analysisMode, setAnalysisMode] = useState<'text' | 'quantitative' | 'hybrid'>('hybrid');
  const [enableAI, setEnableAI] = useState(false);
  const [apiKey, setApiKey] = useState('');
  const [openaiModel, setOpenaiModel] = useState('gpt-3.5-turbo');
  const [maxTokens, setMaxTokens] = useState(1200);
  const [uidColumn, setUidColumn] = useState('');
  const [opinionColumn, setOpinionColumn] = useState('');
  const [quantColumns, setQuantColumns] = useState<string[]>([]);
  
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [jobId, setJobId] = useState<string | null>(null);
  const [currentProgress, setCurrentProgress] = useState(0);
  const [status, setStatus] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const [results, setResults] = useState<AnalysisResult | null>(null);
  const [analysisCompleted, setAnalysisCompleted] = useState(false);

  // WebSocket Ïó∞Í≤∞
  const { 
    isConnected, 
    connect, 
    disconnect, 
    sendMessage 
  } = useWebSocket();

  // WebSocket Î©îÏãúÏßÄ Ìï∏Îì§Îü¨ Ï∞∏Ï°∞
  const messageHandlerRef = useRef<((event: MessageEvent) => void) | null>(null);
  const wsRef = useRef<WebSocket | null>(null);

  // Ïª¨Îüº Î∞∞Ïó¥ Í≤ÄÏ¶ù
  const validColumns = Array.isArray(columns) ? columns : [];

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú WebSocket Ïó∞Í≤∞
  useEffect(() => {
    console.log('üîå Attempting WebSocket connection...');
    connect(['analysis', 'alerts']);
    
    return () => {
      console.log('üîå Disconnecting WebSocket...');
      disconnect();
      // WebSocket Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†ïÎ¶¨
      if (messageHandlerRef.current && wsRef.current) {
        wsRef.current.removeEventListener('message', messageHandlerRef.current);
      }
    };
  }, [connect, disconnect]);

  // UIDÏôÄ Opinion Ïª¨Îüº ÏûêÎèô Í∞êÏßÄ
  useEffect(() => {
    if (validColumns.length > 0 && !uidColumn) {
      // UID Ïª¨Îüº ÏûêÎèô Í∞êÏßÄ
      const uidKeywords = ['uid', 'id', 'ÏïÑÏù¥Îîî', 'ÏÇ¨Î≤à', 'ÏßÅÏõê', 'user', 'emp'];
      const foundUid = validColumns.find(col => 
        uidKeywords.some(keyword => col.toLowerCase().includes(keyword))
      );
      if (foundUid) {
        setUidColumn(foundUid);
        console.log('üéØ Auto-detected UID column:', foundUid);
      }

      // Opinion Ïª¨Îüº ÏûêÎèô Í∞êÏßÄ
      const opinionKeywords = ['ÏùòÍ≤¨', 'opinion', 'ÌèâÍ∞Ä', 'feedback', 'ÎÇ¥Ïö©', 'ÏΩîÎ©òÌä∏', 'comment'];
      const foundOpinion = validColumns.find(col => 
        opinionKeywords.some(keyword => col.toLowerCase().includes(keyword))
      );
      if (foundOpinion) {
        setOpinionColumn(foundOpinion);
        console.log('üéØ Auto-detected Opinion column:', foundOpinion);
      }

      // Ï†ïÎüâ Ïª¨Îüº ÏûêÎèô Í∞êÏßÄ
      const quantKeywords = ['Ï†êÏàò', 'score', 'ÌèâÏ†ê', 'rating', 'Îì±Í∏â', 'grade'];
      const foundQuant = validColumns.filter(col => 
        quantKeywords.some(keyword => col.toLowerCase().includes(keyword))
      );
      if (foundQuant.length > 0) {
        setQuantColumns(foundQuant);
        console.log('üéØ Auto-detected Quantitative columns:', foundQuant);
      }
    }
  }, [validColumns, uidColumn]);

  // WebSocket Î©îÏãúÏßÄ Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
  useEffect(() => {
    // Î∞±ÏóîÎìú Î©îÏãúÏßÄ Ìï∏Îì§Îü¨
    const handleBackendMessage = (event: MessageEvent) => {
      try {
        const data: BackendWebSocketMessage = JSON.parse(event.data);
        console.log('üì° Backend WebSocket message:', data);
        
        switch (data.type) {
          case 'analysis_progress':
            setCurrentProgress(data.progress || 0);
            setStatus(`Ï≤òÎ¶¨ Ï§ë... ${data.current_uid || ''} (${data.processed || 0}/${data.total || totalRecords})`);
            break;
            
          case 'analysis_completed':
            setIsAnalyzing(false);
            setAnalysisCompleted(true);
            setCurrentProgress(100);
            setStatus('Î∂ÑÏÑù ÏôÑÎ£å!');
            
            // ÏôÑÎ£å Ïãú Í≤∞Í≥º ÏóÖÎç∞Ïù¥Ìä∏
            if (data.average_score !== undefined) {
              setResults({
                total_analyzed: data.total_processed || totalRecords,
                average_score: data.average_score,
                processing_time: 'Ï≤òÎ¶¨ÏôÑÎ£å'
              } as AnalysisResult);
            }
            
            // ÏôÑÎ£å Ïãú ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®
            if (jobId) {
              refreshAnalysisStatus(jobId);
            }
            break;
            
          case 'analysis_failed':
            setError(data.error || 'Î∂ÑÏÑù Ïã§Ìå®');
            setIsAnalyzing(false);
            setStatus('Î∂ÑÏÑù Ïã§Ìå®');
            setCurrentProgress(0);
            break;
            
          case 'analysis_started':
            setStatus('Î∂ÑÏÑùÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§...');
            setCurrentProgress(0);
            break;
        }
      } catch (err) {
        console.error('WebSocket message parse error:', err);
      }
    };

    // WebSocket Ïù∏Ïä§ÌÑ¥Ïä§ Ï∞æÍ∏∞ Î∞è Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
    const setupWebSocketListener = () => {
      // WebSocketServiceÏùò Ïã§Ï†ú WebSocket Ïù∏Ïä§ÌÑ¥Ïä§ Ï†ëÍ∑º ÏãúÎèÑ
      const webSocketService = (window as any).webSocketService;
      const ws = webSocketService?.ws || (window as any).__airiss_ws;
      
      if (ws && ws.addEventListener) {
        console.log('‚úÖ Setting up WebSocket listener');
        wsRef.current = ws;
        messageHandlerRef.current = handleBackendMessage;
        ws.addEventListener('message', handleBackendMessage);
        return true;
      }
      return false;
    };

    // Ï¶âÏãú ÏãúÎèÑÌïòÍ≥†, Ïã§Ìå®ÌïòÎ©¥ ÏßÄÏó∞ ÌõÑ Ïû¨ÏãúÎèÑ
    if (!setupWebSocketListener()) {
      const retryTimer = setTimeout(() => {
        setupWebSocketListener();
      }, 1000);
      
      return () => {
        clearTimeout(retryTimer);
        if (messageHandlerRef.current && wsRef.current) {
          wsRef.current.removeEventListener('message', messageHandlerRef.current);
        }
      };
    }

    // ÌÅ¥Î¶∞ÏóÖ
    return () => {
      if (messageHandlerRef.current && wsRef.current) {
        wsRef.current.removeEventListener('message', messageHandlerRef.current);
      }
    };
  }, [jobId, totalRecords, isAnalyzing]);

  // Î∂ÑÏÑù ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®
  const refreshAnalysisStatus = async (jobId: string) => {
    try {
      const statusData = await getAnalysisStatus(jobId);
      console.log('üîÑ Status refresh:', statusData);
      
      if (statusData.average_score !== undefined) {
        setResults({
          total_analyzed: statusData.processed || statusData.total || totalRecords,
          average_score: statusData.average_score,
          processing_time: statusData.processing_time || 'ÏôÑÎ£å'
        } as AnalysisResult);
      }
    } catch (err) {
      console.error('‚ùå Status refresh failed:', err);
    }
  };

  // Î∂ÑÏÑù ÏÉÅÌÉú Ìè¥ÎßÅ (WebSocket Ïó∞Í≤∞ Ïã§Ìå® Ïãú Ìè¥Î∞±)
  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (jobId && isAnalyzing) {
      console.log('üîÑ Starting status polling for job:', jobId);
      
      interval = setInterval(async () => {
        try {
          const statusData = await getAnalysisStatus(jobId);
          console.log('üìä Polling status:', statusData);
          
          // Ìè¥ÎßÅÏùÄ WebSocketÏù¥ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏùÑ ÎïåÎßå ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏
          if (!isConnected) {
            setCurrentProgress(statusData.progress || 0);
            setStatus(`Ï≤òÎ¶¨ Ï§ë... (${statusData.processed || 0}/${statusData.total || totalRecords})`);
          }
          
          if (statusData.status === 'completed') {
            setIsAnalyzing(false);
            setAnalysisCompleted(true);
            setCurrentProgress(100);
            clearInterval(interval);
            
            // Í≤∞Í≥º ÏÑ§Ï†ï
            if (statusData.average_score !== undefined) {
              setResults({
                total_analyzed: statusData.processed || totalRecords,
                average_score: statusData.average_score,
                processing_time: statusData.processing_time || 'ÏôÑÎ£å'
              } as AnalysisResult);
            }
          } else if (statusData.status === 'failed') {
            setError(statusData.error || 'Î∂ÑÏÑù Ïã§Ìå®');
            setIsAnalyzing(false);
            setCurrentProgress(0);
            clearInterval(interval);
          }
        } catch (err) {
          console.error('‚ùå Polling error:', err);
        }
      }, 3000); // 3Ï¥àÎßàÎã§ ÏÉÅÌÉú ÌôïÏù∏

      return () => clearInterval(interval);
    }
  }, [jobId, isAnalyzing, totalRecords, isConnected]);

  // Î∂ÑÏÑù ÏãúÏûë
  const handleStartAnalysis = async () => {
    if (!fileId) {
      setError('ÌååÏùºÏùÑ Î®ºÏ†Ä ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    setError(null);
    setIsAnalyzing(true);
    setAnalysisCompleted(false);
    setCurrentProgress(0);
    setStatus('Î∂ÑÏÑù ÏãúÏûë Ï§ë...');
    setResults(null);

    try {
      // Î∞±ÏóîÎìú ÏöîÏ≤≠ ÌååÎùºÎØ∏ÌÑ∞ (AnalysisRequest Î™®Îç∏Í≥º ÏôÑÎ≤ΩÌûà ÏùºÏπò)
      const requestParams = {
        file_id: fileId,
        sample_size: sampleSize,
        analysis_mode: analysisMode,
        enable_ai_feedback: enableAI,
        openai_api_key: enableAI ? apiKey : undefined,
        openai_model: openaiModel,
        max_tokens: maxTokens
      };

      console.log('üöÄ Starting analysis:', requestParams);

      const response = await startAnalysis(requestParams);
      console.log('‚úÖ Analysis started:', response);
      
      setJobId(response.job_id);
      setStatus(response.message || 'Î∂ÑÏÑùÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§');
      
      // WebSocket Î©îÏãúÏßÄ Ï†ÑÏÜ° (Î∂ÑÏÑù Íµ¨ÎèÖ)
      if (isConnected && sendMessage) {
        const subscribeSuccess = sendMessage({
          type: 'subscribe',
          channels: ['analysis'],
          job_id: response.job_id
        });
        console.log('üì° Subscribe to analysis channel:', subscribeSuccess);
      }
    } catch (err: any) {
      console.error('‚ùå Analysis start failed:', err);
      
      let errorMessage = 'Î∂ÑÏÑù ÏãúÏûë Ïã§Ìå®';
      if (err.response?.data?.detail) {
        errorMessage = err.response.data.detail;
      } else if (err.message) {
        errorMessage = err.message;
      }
      
      setError(errorMessage);
      setIsAnalyzing(false);
      setAnalysisCompleted(false);
    }
  };

  // Í≤∞Í≥º Îã§Ïö¥Î°úÎìú
  const handleDownload = async (format: string = 'excel') => {
    if (!jobId) {
      setError('Îã§Ïö¥Î°úÎìúÌï† Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.');
      return;
    }

    try {
      console.log(`üì• Downloading: /analysis/download/${jobId}/${format}`);
      
      const blob = await downloadResults(jobId, format);
      
      // ÌååÏùº ÌôïÏû•Ïûê Î∞è MIME ÌÉÄÏûÖ ÏÑ§Ï†ï
      let extension = 'xlsx';
      let mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
      
      if (format === 'csv') {
        extension = 'csv';
        mimeType = 'text/csv;charset=utf-8;';
      } else if (format === 'json') {
        extension = 'json';
        mimeType = 'application/json;charset=utf-8;';
      }
      
      // Îã§Ïö¥Î°úÎìú Ïã§Ìñâ
      const url = window.URL.createObjectURL(new Blob([blob], { type: mimeType }));
      const link = document.createElement('a');
      link.href = url;
      link.download = `AIRISS_v4_Î∂ÑÏÑùÍ≤∞Í≥º_${new Date().toISOString().split('T')[0]}.${extension}`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      
      console.log('‚úÖ Download completed');
    } catch (err: any) {
      console.error('‚ùå Download failed:', err);
      setError(`Îã§Ïö¥Î°úÎìú Ïã§Ìå®: ${err.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
    }
  };

  // Select Ìï∏Îì§Îü¨
  const handleSampleSizeChange = (event: SelectChangeEvent<number>) => {
    setSampleSize(event.target.value as number);
  };

  const handleAnalysisModeChange = (event: SelectChangeEvent<string>) => {
    setAnalysisMode(event.target.value as 'text' | 'quantitative' | 'hybrid');
  };

  const handleModelChange = (event: SelectChangeEvent<string>) => {
    setOpenaiModel(event.target.value);
  };

  const handleMaxTokensChange = (event: SelectChangeEvent<number>) => {
    setMaxTokens(event.target.value as number);
  };

  return (
    <Box>
      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="h5" gutterBottom>
          AIRISS v4.0 Î∂ÑÏÑù ÏÑ§Ï†ï
        </Typography>
        
        {error && (
          <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError(null)}>
            <AlertTitle>Ïò§Î•ò</AlertTitle>
            {error}
          </Alert>
        )}

        <Grid container spacing={3}>
          {/* ÌååÏùº Ï†ïÎ≥¥ */}
          <Grid item xs={12}>
            <Card variant="outlined">
              <CardContent>
                <Typography variant="subtitle2" color="text.secondary">
                  Î∂ÑÏÑù ÎåÄÏÉÅ ÌååÏùº
                </Typography>
                <Typography variant="h6">{fileName}</Typography>
                <Typography variant="body2" color="text.secondary">
                  Ï¥ù {totalRecords.toLocaleString()}Í∞ú Î†àÏΩîÎìú
                </Typography>
                {validColumns.length > 0 && (
                  <Typography variant="body2" color="text.secondary">
                    {validColumns.length}Í∞ú Ïª¨Îüº Í∞êÏßÄÎê®
                  </Typography>
                )}
              </CardContent>
            </Card>
          </Grid>

          {/* ÏûêÎèô Í∞êÏßÄÎêú Ïª¨Îüº Ï†ïÎ≥¥ ÌëúÏãú */}
          {validColumns.length > 0 && (
            <Grid item xs={12}>
              <Alert severity="info" icon={<Info />}>
                <AlertTitle>ÏûêÎèô Í∞êÏßÄÎêú Ïª¨Îüº Ï†ïÎ≥¥</AlertTitle>
                <Box sx={{ mt: 1 }}>
                  {uidColumn && (
                    <Typography variant="body2">
                      ‚Ä¢ UID Ïª¨Îüº: <strong>{uidColumn}</strong>
                    </Typography>
                  )}
                  {opinionColumn && (
                    <Typography variant="body2">
                      ‚Ä¢ ÏùòÍ≤¨ Ïª¨Îüº: <strong>{opinionColumn}</strong>
                    </Typography>
                  )}
                  {quantColumns.length > 0 && (
                    <Typography variant="body2">
                      ‚Ä¢ Ï†ïÎüâ Îç∞Ïù¥ÌÑ∞ Ïª¨Îüº: <strong>{quantColumns.join(', ')}</strong>
                    </Typography>
                  )}
                  {!uidColumn && !opinionColumn && (
                    <Typography variant="body2" color="warning.main">
                      ‚ö†Ô∏è UID ÎòêÎäî ÏùòÍ≤¨ Ïª¨ÎüºÏùÑ ÏûêÎèôÏúºÎ°ú Í∞êÏßÄÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§. 
                      Î∞±ÏóîÎìúÏóêÏÑú Í∏∞Î≥∏ Ïª¨Îüº ÌÉêÏßÄÎ•º ÏàòÌñâÌï©ÎãàÎã§.
                    </Typography>
                  )}
                </Box>
              </Alert>
            </Grid>
          )}

          {/* Î∂ÑÏÑù ÏÑ§Ï†ï */}
          <Grid item xs={12} md={4}>
            <FormControl fullWidth>
              <InputLabel>ÏÉòÌîå ÌÅ¨Í∏∞</InputLabel>
              <Select value={sampleSize} onChange={handleSampleSizeChange}>
                <MenuItem value={10}>10Í∞ú (ÌÖåÏä§Ìä∏)</MenuItem>
                <MenuItem value={25}>25Í∞ú (ÌëúÏ§Ä)</MenuItem>
                <MenuItem value={50}>50Í∞ú (ÏÉÅÏÑ∏)</MenuItem>
                <MenuItem value={100}>100Í∞ú (Ï†ïÎ∞Ä)</MenuItem>
                <MenuItem value={totalRecords}>Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ ({totalRecords}Í∞ú)</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          
          <Grid item xs={12} md={4}>
            <FormControl fullWidth>
              <InputLabel>Î∂ÑÏÑù Î™®Îìú</InputLabel>
              <Select value={analysisMode} onChange={handleAnalysisModeChange}>
                <MenuItem value="text">ÌÖçÏä§Ìä∏ Î∂ÑÏÑù</MenuItem>
                <MenuItem value="quantitative">Ï†ïÎüâ Î∂ÑÏÑù</MenuItem>
                <MenuItem value="hybrid">ÌïòÏù¥Î∏åÎ¶¨Îìú (Ï∂îÏ≤ú)</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          {/* AI ÏÑ§Ï†ï */}
          <Grid item xs={12}>
            <FormControlLabel
              control={
                <Switch
                  checked={enableAI}
                  onChange={(e) => setEnableAI(e.target.checked)}
                />
              }
              label="OpenAI GPT ÌîºÎìúÎ∞± ÌôúÏÑ±Ìôî (ÏÑ†ÌÉùÏÇ¨Ìï≠)"
            />
          </Grid>

          {enableAI && (
            <>
              <Grid item xs={12} md={4}>
                <TextField
                  fullWidth
                  type="password"
                  label="OpenAI API Key"
                  value={apiKey}
                  onChange={(e) => setApiKey(e.target.value)}
                  placeholder="sk-..."
                />
              </Grid>
              
              <Grid item xs={12} md={4}>
                <FormControl fullWidth>
                  <InputLabel>Î™®Îç∏ ÏÑ†ÌÉù</InputLabel>
                  <Select value={openaiModel} onChange={handleModelChange}>
                    <MenuItem value="gpt-3.5-turbo">GPT-3.5 Turbo</MenuItem>
                    <MenuItem value="gpt-4">GPT-4</MenuItem>
                    <MenuItem value="gpt-4-turbo">GPT-4 Turbo</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12} md={4}>
                <FormControl fullWidth>
                  <InputLabel>ÏùëÎãµ Í∏∏Ïù¥</InputLabel>
                  <Select value={maxTokens} onChange={handleMaxTokensChange}>
                    <MenuItem value={800}>Í∞ÑÎã® (800 ÌÜ†ÌÅ∞)</MenuItem>
                    <MenuItem value={1200}>ÌëúÏ§Ä (1200 ÌÜ†ÌÅ∞)</MenuItem>
                    <MenuItem value={1500}>ÏÉÅÏÑ∏ (1500 ÌÜ†ÌÅ∞)</MenuItem>
                    <MenuItem value={2000}>ÏôÑÏ†Ñ (2000 ÌÜ†ÌÅ∞)</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
            </>
          )}

          {/* Î∂ÑÏÑù Î≤ÑÌäº */}
          <Grid item xs={12}>
            <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
              <Button
                variant="contained"
                size="large"
                startIcon={isAnalyzing ? <Stop /> : <PlayArrow />}
                onClick={handleStartAnalysis}
                disabled={isAnalyzing || !fileId}
                sx={{
                  bgcolor: '#FF5722',
                  '&:hover': { bgcolor: '#E64A19' }
                }}
              >
                {isAnalyzing ? 'Î∂ÑÏÑù Ï§ë...' : 'Î∂ÑÏÑù ÏãúÏûë'}
              </Button>
              
              {isConnected ? (
                <Chip
                  label="Ïã§ÏãúÍ∞Ñ Ïó∞Í≤∞Îê®"
                  color="success"
                  size="small"
                  icon={<CheckCircle />}
                />
              ) : (
                <Chip
                  label="Ìè¥ÎßÅ Î™®Îìú"
                  color="warning"
                  size="small"
                  icon={<Warning />}
                />
              )}
              
              {jobId && (
                <Typography variant="caption" color="text.secondary">
                  ÏûëÏóÖ ID: {jobId.substring(0, 8)}...
                </Typography>
              )}
            </Box>
          </Grid>
        </Grid>
      </Paper>

      {/* ÏßÑÌñâ ÏÉÅÌô© */}
      {(isAnalyzing || currentProgress > 0) && (
        <Paper sx={{ p: 3, mb: 3 }}>
          <Typography variant="h6" gutterBottom>
            Î∂ÑÏÑù ÏßÑÌñâ ÏÉÅÌô©
          </Typography>
          <Box sx={{ mb: 2 }}>
            <LinearProgress 
              variant="determinate" 
              value={currentProgress} 
              sx={{ 
                height: 10, 
                borderRadius: 5,
                bgcolor: 'grey.300',
                '& .MuiLinearProgress-bar': {
                  bgcolor: '#FF5722'
                }
              }}
            />
          </Box>
          <Typography variant="body2" color="text.secondary">
            {status || 'Ï≤òÎ¶¨ Ï§ë...'} - {currentProgress.toFixed(0)}% ÏôÑÎ£å
          </Typography>
        </Paper>
      )}

      {/* Í≤∞Í≥º */}
      {results && analysisCompleted && (
        <Paper sx={{ p: 3 }}>
          <Typography variant="h6" gutterBottom>
            Î∂ÑÏÑù ÏôÑÎ£å
          </Typography>
          <Grid container spacing={2} sx={{ mb: 3 }}>
            <Grid item xs={12} sm={4}>
              <Card>
                <CardContent>
                  <Typography variant="body2" color="text.secondary" gutterBottom>
                    Ï¥ù Î∂ÑÏÑù
                  </Typography>
                  <Typography variant="h4" color="primary">
                    {results.total_analyzed}Í∞ú
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={4}>
              <Card>
                <CardContent>
                  <Typography variant="body2" color="text.secondary" gutterBottom>
                    ÌèâÍ∑† Ï†êÏàò
                  </Typography>
                  <Typography variant="h4" color="primary">
                    {results.average_score?.toFixed(1)}Ï†ê
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={4}>
              <Card>
                <CardContent>
                  <Typography variant="body2" color="text.secondary" gutterBottom>
                    ÏÜåÏöî ÏãúÍ∞Ñ
                  </Typography>
                  <Typography variant="h4" color="primary">
                    {results.processing_time}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
          
          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
            <Button
              variant="contained"
              startIcon={<Download />}
              onClick={() => handleDownload('excel')}
              disabled={!jobId}
              sx={{
                bgcolor: '#FF5722',
                '&:hover': { bgcolor: '#E64A19' }
              }}
            >
              Excel Îã§Ïö¥Î°úÎìú
            </Button>
            <Button
              variant="outlined"
              startIcon={<Download />}
              onClick={() => handleDownload('csv')}
              disabled={!jobId}
              sx={{
                color: '#FF5722',
                borderColor: '#FF5722',
                '&:hover': { 
                  borderColor: '#E64A19',
                  bgcolor: 'rgba(255, 87, 34, 0.08)'
                }
              }}
            >
              CSV Îã§Ïö¥Î°úÎìú
            </Button>
            <Button
              variant="outlined"
              startIcon={<Download />}
              onClick={() => handleDownload('json')}
              disabled={!jobId}
              sx={{
                color: '#FF5722',
                borderColor: '#FF5722',
                '&:hover': { 
                  borderColor: '#E64A19',
                  bgcolor: 'rgba(255, 87, 34, 0.08)'
                }
              }}
            >
              JSON Îã§Ïö¥Î°úÎìú
            </Button>
          </Box>
        </Paper>
      )}
    </Box>
  );
}